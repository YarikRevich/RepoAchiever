/*
 * OpenAPI document of RepoAchiever API Server
 * RepoAchiever API Server Open API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.repoachiever.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ClusterInfoUnit
 */
@JsonPropertyOrder({
  ClusterInfoUnit.JSON_PROPERTY_NAME,
  ClusterInfoUnit.JSON_PROPERTY_HEALTH,
  ClusterInfoUnit.JSON_PROPERTY_WORKERS
})
@lombok.Data @lombok.AllArgsConstructor(staticName = "of")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-17T10:39:25.510760+02:00[Europe/Warsaw]")
public class ClusterInfoUnit {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_HEALTH = "health";
  private Boolean health;

  public static final String JSON_PROPERTY_WORKERS = "workers";
  private Integer workers;

  public ClusterInfoUnit() {
  }

  public ClusterInfoUnit name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public ClusterInfoUnit health(Boolean health) {
    
    this.health = health;
    return this;
  }

   /**
   * Get health
   * @return health
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEALTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHealth() {
    return health;
  }


  @JsonProperty(JSON_PROPERTY_HEALTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHealth(Boolean health) {
    this.health = health;
  }


  public ClusterInfoUnit workers(Integer workers) {
    
    this.workers = workers;
    return this;
  }

   /**
   * Get workers
   * @return workers
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WORKERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWorkers() {
    return workers;
  }


  @JsonProperty(JSON_PROPERTY_WORKERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWorkers(Integer workers) {
    this.workers = workers;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterInfoUnit clusterInfoUnit = (ClusterInfoUnit) o;
    return Objects.equals(this.name, clusterInfoUnit.name) &&
        Objects.equals(this.health, clusterInfoUnit.health) &&
        Objects.equals(this.workers, clusterInfoUnit.workers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, health, workers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterInfoUnit {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    workers: ").append(toIndentedString(workers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

