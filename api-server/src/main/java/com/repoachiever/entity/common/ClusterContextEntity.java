package com.repoachiever.entity.common;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import lombok.AllArgsConstructor;
import lombok.Getter;

/** Represents context sent to RepoAchiever Cluster as a variable during startup operation. */
@Getter
@AllArgsConstructor(staticName = "of")
public class ClusterContextEntity {
  /**
   * Represents unique name of the RepoAchiever Cluster allocation generated by RepoAchiever API Server.
   */
  @JsonProperty("name")
  private String name;

  /**
   * Represents all the content locations elected to a particular RepoAchiever Cluster allocation.
   */
  @JsonProperty("locations")
  private List<String> locations;

  /** Represents RepoAchiever Cluster configuration used for internal communication infrastructure setup. */
  @AllArgsConstructor(staticName = "of")
  public static class Communication {
    @JsonProperty("port")
    public Integer port;
  }

  @JsonProperty("communication")
  public Communication communication;

  /** Represents RepoAchiever Cluster configuration used for content management. */
  @AllArgsConstructor(staticName = "of")
  public static class Content {
    @JsonProperty("format")
    public String format;
  }

  @JsonProperty("content")
  public Content content;

  /**
   * Represents RepoAchiever API Server resources configuration section.
   */
  @AllArgsConstructor(staticName = "of")
  public static class Resource {
    /**
     * Represents RepoAchiever API Server configuration used for RepoAchiever Cluster.
     */
    @AllArgsConstructor(staticName = "of")
    public static class Cluster {
      @JsonProperty("max-workers")
      public Integer maxWorkers;
    }

    @JsonProperty("cluster")
    public Cluster cluster;

    /**
     * Represents RepoAchiever API Server configuration used for RepoAchiever Worker.
     */
    @AllArgsConstructor(staticName = "of")
    public static class Worker {
      @JsonProperty("frequency")
      public String frequency;
    }

    @JsonProperty("worker")
    public Worker worker;
  }

  @JsonProperty("resource")
  public Resource resource;
}